npm install -g @angular/cli
ng new [naziv-aplikacije]
cd naziv-aplikacije
ng serve // pokretanje servera sa aplikacijom

novi terminal iz IDE-a, dok ng serve radi u pozadini, u folderu aplikacije:
ng generate component [naziv] // isto tako može i ng g c - i provjeriti da li je app.module updateovan

- string interpolation, šta god je unutar "{{}}" mora na kraju biti string ili se pretvoriti u string pa čak i funkcija koja vraća string

property binding [propertyName] = "propertyValue"

za ngModel potrebno je uključiti FormsModule u imports dio app.module.ts

two way binding [(ngModel)] = "propertyValue"

*ngIf = "izraz koji vraća true ili false" - zvjezdica mora ispred jer je structural directive -> mijenja DOM

*ngFor="let arrayItem of Items; let i = index" - način da se dobije index (počinje od 0)

npm install --save bootstrap@3

<--------------------------Data binding------------------------------>

C1 sve za istu komponentu{
	u typescript fajlu:
			  #2								object to be emmited(JSON or model or whatever) #1
	@Output() eventName = new EventEmmiter<{name: string, description: string}>();


	pozivanje eventa sa stvarnim podacima:

							ili vrijednosti iz drugih varijabli
	this.eventName.emit({name: 'ime', description: 'opis'})

				from hashtag
	@ViewChild('elementReference') elementReference: ElementRef;
									Tip html taga
	nazivFunkcije(elementReference: HTMLInputElement){
		this.eventName.emit({name: elementReference.value, description: 'opis'})
	}

	u html fajlu

	input element ili bilo koji tag kojem hoćemo pristupiti preko ViewChild (unutar uglastih zagrada)
	#elementReference - (nbilo koji naziv)

	da proslijedimo na klik nazad u typescript fajl :
	u button tagu
	(click) = "nazivFunkcije(elementReference)"
}

C0 u drugoj komponenti koja je nad prethodnom(tj. koja koristi prethodnu u sebi){
	u typescript fajlu:
	
	nizUGlavnoj = 'aaaaaaa';
	
							ovo je identično kao object to be emmited #1
	novaFunkcija(podaci: {name: string, description: string}){
		iskoristimo podatke iz podaci za šta nam trebaju
	}
	
	u html fajlu:
	
	<prethodna-komponenta 
	     ovdje je iskorišten #2 ide s lijeva na desno
		 eventName se proslijedi kroz novaFunkcija($event) u typescript fajle komponente
		(eventName)="novaFunkcija($event)">
	</prethodna-komponenta>
	
	
	binding za input za treću komponentu:
	
	primjer iz for petlje
	
	<app-treca-komponenta
	*ngFor="let elementNiza of nizUGlavnoj"
	   #3 (property binding)
	[element] = "elementNiza">
	</app-treca-komponenta>
	
	
}

a može biti ista kao i prva
C2 treća komponenta{
	u typescript fajlu:
	preko ovoga se ubacuje iz nadređene komponente u ovu
			    #3
	@Input() element: {naziv: string, kolicina: string}
	
	u html fajlu se preko string interpolation koristi input element
	
	...
		<p> 
			{{element.naziv}} - {{element.kolicina}}
		</p>
	...
}

             C0   
			/  \
		   /    \     | 
	 ^	output input  v
	 |	 /        \
		/          \ 
	   C1          C2


